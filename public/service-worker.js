// Set this to true for production
var doCache = true;

// If we are in development, make sure we don't run into any cache issues
// Delete them all
if (!doCache) {
  caches.keys().then(function (cachesNames) {
    console.log("Delete caches");
    return Promise.all(cachesNames.map(function (cacheName) {
      return caches.delete(cacheName).then(function () {
        console.log("Cache with name " + cacheName + " is deleted");
      });
    }))
  }).then(function () {
    console.log("All caches are deleted");
  });
}

// Name our cache
var CACHE_NAME = 'my-pwa-cache-v1';
// We want to cache the page and the bundle.js generated by webpack
// We could also cache any static assets like CSS or images
var urlsToCache = [
  '/',
  '/static/js/bundle.js'
];
// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener('install', function(event) {
  if (doCache) {
    event.waitUntil(
      caches.open(CACHE_NAME)
        .then(function(cache) {
          // Open a cache and cache our files
          return cache.addAll(urlsToCache);
          console.log('cached');
        })
    );
  }
});

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener('fetch', function(event) {
    if (doCache) {
      event.respondWith(
          caches.match(event.request).then(function(response) {
              return response || fetch(event.request);
          })
      );
    }
});